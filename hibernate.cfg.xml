<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hibernate.jdbc.use_get_generated_keys">true</property>
        <!--Database connection settings -->
        <property name="hibernate.connection.datasource">jdbc/imaestros</property>
        <!-- JDBC connection pool (use the built-in) -->
        <property name="connection.pool_size">100</property>
        <!-- SQL dialect -->
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle9Dialect</property>
        <!--
        <property name="hibernate.dialect">org.hibernate.dialect.Informix11Dialect</property>
        <property name="hibernate.dialect">org.hibernate.dialect.PostgresPlusDialect</property>-->
        <!-- Enable Hibernate's automatic session context management -->
        <property name="hibernate.current_session_context_class">thread</property>
        <!-- Disable the second-level cache
        <property name="hibernate.cache.use_second_level_cache">false</property>
        Enable the second-level cache -->
        <property name="hibernate.cache.use_second_level_cache">true</property>
        <property name="hibernate.cache.region.factory_class">
            org.hibernate.cache.ehcache.HCISSingletonEhCacheRegionFactory
        </property>
        <property name="net.sf.ehcache.configurationResourceName">${ehcache.config.path}</property>
        <property name="hibernate.cache.use_query_cache">true</property>
        <!-- Echo all executed SQL to stdout -->

        <property name="show_sql">true</property>
        <property name="hibernate.format_sql">false</property>
        <!--property name="use_sql_comments">true</property
        Drop and re-create the database schema on startup
        <property name="hbm2ddl.auto">update</property>
        Se establece que va a ser la aplicacion quien va a realizar el flush() o el
                   commit() sobre la sesion en vez de dejar a hibernate que la gestione la por su cuenta.
                   Esta estrategia va a ser util en el filtro 'HibernateSessionFilter'
              <property name="hibernate.current_session_context_class">managed</property> -->

        <!-- Retrocompatibilidad con: composite-id merge="true" -->
        <property name="hibernate.ejb.metamodel.population">disabled</property>
        <!-- Retrocompatibilidad con: flush fuera de transaction -->
        <property name="hibernate.allow_update_outside_transaction">true</property>
        <!-- Retrocompatibilidad con: el cierre de conexiones por defecto
        ver: https://access.redhat.com/documentation/en-us/jboss_enterprise_application_platform/5/html/hibernate_core_reference_guide/transactions-connection-release -->
        <property name="hibernate.connection.release_mode">on_close</property>
        <!-- Retrocompatibilidad con: generator class="sequence" -->
        <property name="hibernate.id.new_generator_mappings">false</property>

        <!-- Mapeos -->
        <mapping resource="com/hphis/pojo/CheckPojo.hbm.xml"/>
		<mapping resource="com/hphis/pojo/Paciente.hbm.xml"/>
    </session-factory>
</hibernate-configuration>